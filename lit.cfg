# Lit local configuration for Cheerp tests

import lit.formats
import os
import shutil

# Test name and source root
config.name = 'Cheerp'
config.test_source_root = os.path.dirname(__file__)
config.test_format = lit.formats.ShTest(execute_external=True)

# File suffixes to consider as tests
config.suffixes = ['.cpp', '.c']

# Exclude certain patterns
config.excludes = ['unit/tests.h', 'Inputs']

# Read compilation flags from environment variables
cheerp_base = '/opt/cheerp/bin/clang++'
cheerp_flags = os.environ.get('CHEERP_FLAGS', '')
extra_flags = os.environ.get('EXTRA_FLAGS', '')

# define all possible cheerp compilation targets
cheerp_targets = ["js", "wasm", "asmjs"]

# add command line parameter to select targets
targets_csv = lit_config.params.get("TARGETS", "").strip()
if targets_csv:
    input_targets = [t.strip().lower() for t in targets_csv.split(",")]
    invalid_targets = [t for t in input_targets if t not in cheerp_targets]
    if invalid_targets:
        lit_config.fatal("Invalid TARGETS specified: {}, valid targets are {}".format(", ".join(invalid_targets), ', '.join(cheerp_targets)))
    selected_targets = set(input_targets)
else:
    selected_targets = set(cheerp_targets)

# set environment variables to indicate which targets are enabled
config.environment["HAS_JS"] = "1" if "js" in selected_targets else "0"
config.environment["HAS_WASM"] = "1" if "wasm" in selected_targets else "0"
config.environment["HAS_ASMJS"] = "1" if "asmjs" in selected_targets else "0"

# Set available features based on selected targets
if "js" in selected_targets:
    config.available_features.add('js')
if "wasm" in selected_targets:
    config.available_features.add('wasm')
if "asmjs" in selected_targets:
    config.available_features.add('asmjs')

#notes selected targets on stdout
lit_config.note('Selected targets: {}'.format(selected_targets))

# Combine flags
all_flags = ' '.join(filter(None, [cheerp_flags, extra_flags]))
if all_flags:
    cheerp_cmd = cheerp_base + ' ' + all_flags
else:
    cheerp_cmd = cheerp_base

# Find FileCheck - check environment variable, then PATH, then common locations
filecheck_path = os.environ.get('FILECHECK') or shutil.which('FileCheck')
if not filecheck_path:
    import glob
    search_paths = (
        glob.glob('/usr/bin/FileCheck-*') +
        glob.glob('/usr/local/bin/FileCheck-*') +
        ['usr/bin/FileCheck', '/usr/local/bin/FileCheck']
    )
    for path in search_paths:
        if os.path.isfile(path) and os.access(path, os.X_OK):
            filecheck_path = path
            break
if not filecheck_path:
    filecheck_path = 'FileCheck'

# Substitutions for common patterns
config.substitutions.append(('%cheerp_clang', cheerp_cmd))
config.substitutions.append(('%FileCheck', filecheck_path))
config.substitutions.append(('%node', 'node'))

config.substitutions.append(('%if_js', 'if [ "$HAS_JS" = "1" ]; then'))
config.substitutions.append(('%if_wasm', 'if [ "$HAS_WASM" = "1" ]; then'))
config.substitutions.append(('%if_asmjs', 'if [ "$HAS_ASMJS" = "1" ]; then'))
config.substitutions.append(('%endif', '; fi'))

# %S = directory of the test
# %s = path to the test file
# %t = temporary file path unique to this test

# Enable execution of tests from within the test directory
config.test_exec_root = os.path.dirname(__file__)

# Set environment variables if needed
if 'PATH' in os.environ:
    config.environment['PATH'] = os.environ['PATH']
